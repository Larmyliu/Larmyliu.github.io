<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Larmy Blog</title>
  
  
  <link href="https://larmyliu.github.io/atom.xml" rel="self"/>
  
  <link href="https://larmyliu.github.io/"/>
  <updated>2024-06-30T07:09:23.903Z</updated>
  <id>https://larmyliu.github.io/</id>
  
  <author>
    <name>Larmy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Golang学习之error篇</title>
    <link href="https://larmyliu.github.io/Golang%E5%AD%A6%E4%B9%A0%E4%B9%8Berror%E7%AF%87/"/>
    <id>https://larmyliu.github.io/Golang%E5%AD%A6%E4%B9%A0%E4%B9%8Berror%E7%AF%87/</id>
    <published>2024-06-30T07:00:11.000Z</published>
    <updated>2024-06-30T07:09:23.903Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="Golang学习之error篇"><a href="#Golang学习之error篇" class="headerlink" title="Golang学习之error篇"></a>Golang学习之error篇</h2><p>以一个打开系统文件为例，在error文件夹下有个<code>hello.txt</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">file, err := os.Open(<span class="string">&quot;C:\\Users\\42012\\Desktop\\代码\\error\\hello.txt&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;open file error&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(file, err)</span><br><span class="line">fmt.Printf(<span class="string">&quot;Error的类型是：%T&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>正常运行的结果是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&amp;&#123;0xc000072780&#125; &lt;nil&gt;</span><br><span class="line">Error的类型是：&lt;nil&gt;</span><br></pre></td></tr></table></figure><p>当我们把<code>hello.txt</code>改成<code>hello1.txt</code>后，结果是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">open file error</span><br><span class="line">&lt;nil&gt; open C:\Users\42012\Desktop\代码\error\hello1.txt: The system cannot find the file specified.</span><br><span class="line">Error的类型是：*os.PathError</span><br></pre></td></tr></table></figure><p>控制台打印出了<code>PathError</code>路径错误，我们就可以根据error的类型和提示，快速定位代码中有问题的代码片段，并且加以修正。</p><h3 id="自定义error"><a href="#自定义error" class="headerlink" title="自定义error"></a>自定义error</h3><p>虽然golang有很多自带的error类型和提示，但是并不能完全覆盖所有的错误。</p><p>例如定义一个除法函数，当我们输入的被除数出现0时，整个程序就崩溃无法执行</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DivisionForInt</span><span class="params">(dividend, divsor <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> dividend / divsor</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(DivisionForInt(<span class="number">10</span>, <span class="number">5</span>))</span><br><span class="line">fmt.Println(DivisionForInt(<span class="number">10</span>, <span class="number">0</span>))</span><br><span class="line">fmt.Println(DivisionForInt(<span class="number">0</span>, <span class="number">100</span>))</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这时候运行程序得到的结果是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">panic: runtime error: integer divide by zero</span><br><span class="line"></span><br><span class="line">goroutine 1 [running]:</span><br><span class="line">main.DivisionForInt(...)</span><br></pre></td></tr></table></figure><p>可以看出在执行完第一个除法后，第二个除法的被除数为0，导致程序直接出现了panic崩溃，第三个除法也不会继续执行了。那么为了让程序更加健壮，我们需要对这个错误类型进行兼容处理，可以通过自定义error来解决。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> errDivisionByZero = errors.New(<span class="string">&quot;被除数不能为0&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DivisionForInt</span><span class="params">(dividend, divsor <span class="type">int</span>)</span></span> (<span class="type">int</span>, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> divsor == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>, errDivisionByZero</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dividend / divsor, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(DivisionForInt(<span class="number">10</span>, <span class="number">5</span>))</span><br><span class="line">fmt.Println(DivisionForInt(<span class="number">10</span>, <span class="number">0</span>))</span><br><span class="line">fmt.Println(DivisionForInt(<span class="number">0</span>, <span class="number">100</span>))</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过new得到一个自定义的error，在程序中对除数先进行判断，如果是0的话返回这个error给主程序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2 &lt;nil&gt;</span><br><span class="line">0 被除数不能为0</span><br><span class="line">0 &lt;nil&gt;</span><br></pre></td></tr></table></figure><p>程序就不会发生崩溃，后面的除法也可以正常的运行。</p><p>另一种实现方式</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> errDiv <span class="keyword">struct</span> &#123;</span><br><span class="line">errStr <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *errDiv)</span></span> Error() <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> e.errStr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DivisionForInt2</span><span class="params">(dividend, divsor <span class="type">int</span>)</span></span> (<span class="type">int</span>, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> divsor == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>, &amp;errDiv&#123;</span><br><span class="line">errStr: <span class="string">&quot;除数不能为0哦&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dividend / divsor, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(DivisionForInt2(<span class="number">10</span>, <span class="number">5</span>))</span><br><span class="line">fmt.Println(DivisionForInt2(<span class="number">10</span>, <span class="number">0</span>))</span><br><span class="line">fmt.Println(DivisionForInt2(<span class="number">0</span>, <span class="number">100</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="panic和recover"><a href="#panic和recover" class="headerlink" title="panic和recover"></a>panic和recover</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/js/APlayer.min.js&quot; class=&quot;aplayer-se</summary>
      
    
    
    
    <category term="后端" scheme="https://larmyliu.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="后端" scheme="https://larmyliu.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="golang" scheme="https://larmyliu.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>并发</title>
    <link href="https://larmyliu.github.io/%E5%B9%B6%E5%8F%91/"/>
    <id>https://larmyliu.github.io/%E5%B9%B6%E5%8F%91/</id>
    <published>2024-06-30T07:00:11.000Z</published>
    <updated>2024-06-30T07:05:15.413Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><hr><h2 id="title-并发date-2024-03-07-20-17-24tags-后端-Golangcategories-Golang"><a href="#title-并发date-2024-03-07-20-17-24tags-后端-Golangcategories-Golang" class="headerlink" title="title: 并发date: 2024-03-07 20:17:24tags:    - 后端    - Golangcategories: Golang"></a>title: 并发<br>date: 2024-03-07 20:17:24<br>tags:<br>    - 后端<br>    - Golang<br>categories: Golang</h2><h1 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h1><p>在现实生活中，同时处理多件事情是非常常见的现象。比如一边上厕所一边玩手机，一边洗澡一边听歌等等。那在开发的过程中，我们也会有同时进行多个任务的需求，这就是我们常说的并发。</p><h2 id="go并发"><a href="#go并发" class="headerlink" title="go并发"></a>go并发</h2><p><code>go</code>语言和其他语言相比，在处理并发方面有其得天独厚的优势，通过<code>goroutine</code>和<code>channel</code>在底层已经帮各位开发者处理好了并发的问题，只需要通过关键字<code>go</code>就可以启动一个新的<code>goroutine</code>。</p><p>举个🌰</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayHi</span><span class="params">(name <span class="type">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s say hi\n&quot;</span>, name)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">go</span> sayHi(<span class="string">&quot;liujiamin&quot;</span>)</span><br><span class="line">sayHi(<span class="string">&quot;larmy&quot;</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://larmy-1303020690.cos.ap-guangzhou.myqcloud.com/image-20240307201142150.png" alt="image-20240307201142150"></p><p>可以看到执行顺序没有固定的先后顺序，因为是两个<code>goroutine</code>在运行</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/js/APlayer.min.js&quot; class=&quot;aplayer-se</summary>
      
    
    
    
    <category term="前端" scheme="https://larmyliu.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="后端" scheme="https://larmyliu.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="golang" scheme="https://larmyliu.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>聊聊加解密那些事</title>
    <link href="https://larmyliu.github.io/%E8%81%8A%E8%81%8A%E5%8A%A0%E8%A7%A3%E5%AF%86%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
    <id>https://larmyliu.github.io/%E8%81%8A%E8%81%8A%E5%8A%A0%E8%A7%A3%E5%AF%86%E9%82%A3%E4%BA%9B%E4%BA%8B/</id>
    <published>2024-06-30T06:55:19.723Z</published>
    <updated>2024-06-30T06:57:00.468Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h1 id="聊聊加解密那些事"><a href="#聊聊加解密那些事" class="headerlink" title="聊聊加解密那些事"></a>聊聊加解密那些事</h1><h2 id="什么是加解密"><a href="#什么是加解密" class="headerlink" title="什么是加解密"></a>什么是加解密</h2><p>顾名思义我可以通过一个特定的加密方式，让原先的程序员们最爱的明文123456，变成别人看不懂的<code>U2FsdGVxxx</code>，再通过一个特定的解密方式来把数据变回123456。</p><h2 id="加密方式"><a href="#加密方式" class="headerlink" title="加密方式"></a>加密方式</h2><p>加密又分为对称加密和非对称加密，我们下面详细说一下这两种加密方式。</p><h3 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h3><p>对称加密可以简单理解为，我现在有一把钥匙🔑，我发送信息之前通过这把钥匙进行加密，如果有人给我发送加密信息，我也可以用这把钥匙来进行解密</p><p><img src= "/img/loading.gif" data-src="https://sectigostore.com/blog/wp-content/uploads/2020/04/types-of-encryption-symmetric-encryption.png"></p><p>对称加密主要涉及到以下三种算法</p><ul><li>**AES (Advanced Encryption Standard)**：AES是一种对称加密标准，支持128，192和256位密钥长度。AES加密过程包括多轮的重复和置换。每一轮使用的都是同样的加密密钥，这也就是为什么它被称为对称加密算法。</li><li>**DES (Data Encryption Standard)**：尽管受到批评因为它的56位密钥容易受到穷举攻击，DES在很长一段时间里仍然是行业标准。DES使用的是分组加密方式，数据被分成64位的块，然后按照密钥加密。</li><li>**3DES (Triple DES)**：为了铺平DES的不足，3DES被开发出来，以上述的DES作为基础，重复加密三次以增加其安全性。虽然3DES淘汰了DES的弱点，但是它的处理速度相对较慢。</li></ul><p><strong>好处</strong>：<br>我们只需一把钥匙🔑就可以完成加密和解密操作，非常简单</p><p><strong>坏处</strong>：<br>但是同时也暴露了一个问题？如何让别人拿到这把钥匙？难道我们通过明文传输这把钥匙🔑吗？显然是不可以的，这时候就引申出了非对称加密</p><h3 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h3><p>非对称加密就是为了解决别人如何拿到钥匙🔑，在对称加密中我们只有一把钥匙🔑，那么在非对称加密中我们有两把钥匙：一把是<strong>公钥</strong>，一把是<strong>私钥</strong>，公钥加密的内容可以用私钥解密，私钥加密的内容可以用公钥来解密</p><p>非对称加密主要有以下几种算法：</p><ul><li>**RSA (Rivest-Shamir-Adleman)**：RSA是当前最常见的公钥系统，它基于整数因子分解这种运算困难问题实现。常用于在数据传输过程中加密数据。RSA的安全性基于大数因子分解问题的困难性，JWT属于RS256。</li><li>**DSA (Digital Signature Algorithm)**：DSA 是美国国家安全局推广的一种标准，主要应用于电子签名的情景。DSA在实现上采用了公钥和私钥不同，安全性依赖于离散对数问题，它相比RSA在执行效率上更快。</li></ul><p>（<strong>OpenSSH 7.0</strong>及以上版本默认<strong>禁用</strong>了<code>ssh-dss</code>(DSA)公钥算法。官方没有给出具体的解释，但其中可能有OpenSSH的DSA密钥位数生成的原因，同时生成签名时随机性差，可能会<strong>泄漏私钥</strong>，且以现在机算机的算力，DSA 1024-bit已经实际上可破解，建议不使用）</p><p>工作方式：</p><p><img src= "/img/loading.gif" data-src="https://sectigostore.com/blog/wp-content/uploads/2020/04/types-of-encryption-asymmetric-encryption.png"></p><p>过程：</p><ul><li>浏览器生成公钥A，私钥A’;服务器生成公钥B，私钥B’</li><li>通过明文传输浏览器的公钥A给服务器，服务器的公钥B给浏览器</li><li>浏览器给服务器发消息时用私钥A’进行加密，服务器通过浏览器的公钥A进行解密，成功拿到浏览器加密数据</li><li>服务器给浏览器发消息时用私钥B’进行加密，浏览器通过服务器的公钥B进行解密，成功拿到服务器加密数据</li></ul><p>看上去非对称加密成功解决了我们的问题，但是其实还是有问题存在的，那就是<strong>中间人攻击</strong>，这个我们等一下再说</p><p>抛开攻击先不说，https并没有采用非对称加密来进行数据加密，因为加密是一个非常复杂的过程，那么就意味着解密需要大量的<strong>耗时</strong>，如果我每一条数据加密解密的时间都很长，用户的等到时间也就增长，那么用户体验就会下降</p><h3 id="对称加密-非对称加密"><a href="#对称加密-非对称加密" class="headerlink" title="对称加密+非对称加密"></a>对称加密+非对称加密</h3><p>https &#x3D; http + TLS&#x2F;SSL(加密) + 身份认证 + 完整性保护</p><p>那么最终https的加密采用的是<strong>对称加密+非对称加密</strong>的形式，那么具体是怎样来实现的<br>过程：</p><ul><li>服务器利用<strong>非对称加密</strong>生成公钥A，私钥A’</li><li>浏览器请求时，明文传输公钥A</li><li>浏览器拿到公钥A后，利用<strong>对称加密</strong>生成秘钥X</li><li>浏览器用公钥A加密刚刚生成的秘钥X，传回给服务器</li><li>服务器用私钥A’解密，拿到秘钥X</li><li>所有数据通过秘钥X进行加密解密</li></ul><p>这样就解决了对称加密对方无法拿到秘钥的问题，和非对称加密耗时的问题</p><h4 id="中间人攻击"><a href="#中间人攻击" class="headerlink" title="中间人攻击"></a>中间人攻击</h4><p>就算使用了<strong>对称加密➕非对称加密</strong>的形式来加密数据，就一定能保证我们的数据不会被泄露吗？显然世界上没有绝对的事情<br><img src= "/img/loading.gif" data-src="https://blog.pradeo.com/hubfs/mitm.png"><br>中间人攻击其实就是在浏览器和服务器之间有个第三者（小三），我们的数据都经过他，他可以加密和解密我们的数据，那么具体过程如下：</p><ul><li>浏览器非对称加密生成公钥A，私钥A’</li><li>想通过明文发送公钥A给服务器，但是此时这个请求被中间人劫持了</li><li>中间人自己也利用非对此加密生成公钥B，私钥B’,并将公钥B发送给服务器</li><li>服务器拿到中间人的公钥B后，利用<strong>对称加密</strong>生成秘钥X，利用公钥B加密后发送回给中间人</li><li>中间人利用私钥B’解密，成功拿到秘钥X，偷偷保存起来</li><li>中间人再利用劫持到的公钥A，加密秘钥X，发送给回浏览器</li><li>浏览器用自己的私钥A’,解密拿到秘钥X，双方开始利用秘钥X进行加密解密数据</li><li>中间人成功拿到加密数据</li></ul><p>在双方都不知道的情况下，数据就这样被泄露了，因为公钥本身是明文传输的，难道还得对公钥的传输进行加密？为了解决这个问题，我们引出<strong>身份认证</strong></p><h3 id="身份认证"><a href="#身份认证" class="headerlink" title="身份认证"></a>身份认证</h3><p>来一个生活场景，我买了一张飞往北京的机票，如果在没有身份认证的情况下，假如有人知道我买了一张机票并且提前前往机场领取机票，那么我就损失了上千元，所以我们就需要验证身份，证明你本人是你本人，那么我们拿机票时就需要<strong>身份证</strong>才可以成功拿到机票，由<strong>权威</strong>的政府机关颁发</p><p>那么https也是通过专门的权威机构<strong>CA</strong>（Certificate Authority）来颁发<strong>证书</strong>来确定你身份的真实性</p><p>那么我们就可以这样理解，在https请求中，<strong>CA</strong>作为一个大家都信赖的大哥，如果某个网站能够拿到这个大哥颁发的<strong>证书</strong>，那么这个网站的请求都是可靠的</p><h4 id="数字证书"><a href="#数字证书" class="headerlink" title="数字证书"></a>数字证书</h4><p>在我们使用https请求之前，可以去向CA机构申请证书，证书内容包括域名、申请者信息、公钥信息等等。如果拥有CA机构颁发的证书，那个请求就是可靠的，那么他是通过什么方式来证明这个证书是可靠的呢？</p><p>在申请证书时会有相关信息的填写，被认可后，会根据这些信息生成一个<strong>签名</strong>，比较证书内容和签名是否一致，就可以知道我们的信息是否有被修改</p><p>这就是数字证书的“防伪技术”，这里的“签名”就叫<strong>数字签名</strong></p><h4 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h4><p>那么数字签名的生成和验证是一个怎么样的过程</p><p>生成：</p><ul><li>受信任的CA机构有非对称加密的公钥A，私钥A’</li><li>对证书内的相关数据内容进行hash，得到数据X</li><li>将数据X用私钥A’进行加密，得到数字签名S</li></ul><p>证书内容和数字签名一起组成了证书，发送给浏览器，那么浏览器数如何验证的？</p><p>验证：</p><ul><li>浏览器拿到证书后，得到证书内容和数字签名S</li><li>由于是浏览器信任的机构，所以浏览器保有它的公钥A</li><li>用公钥A进行解密签名S，得到在生成过程中，hash过后的证书内容数据X</li><li>用证书里指明的hash算法对证书内容进行hash得到数据X’</li><li>如果没有被篡改那么 X &#x3D; X’,等于则表明证书可信</li></ul><h4 id="中间人可以对证书内容进行篡改吗？"><a href="#中间人可以对证书内容进行篡改吗？" class="headerlink" title="中间人可以对证书内容进行篡改吗？"></a>中间人可以对证书内容进行篡改吗？</h4><p>我们说过中间人攻击，那么中间人可以对证书的内容进行篡改吗？显然是不可以的，假设中间人篡改了证书的原文，但是他没有CA机构的私钥，所以无法修改数字签名。浏览器拿到证书后，会对证书进行验证，解密后就会发现内容不一致，则说明证书已被篡改，证书不可信，从而终止向服务器传输信息，防止信息泄露给中间人</p><h4 id="中间人可以直接掉包证书吗？"><a href="#中间人可以直接掉包证书吗？" class="headerlink" title="中间人可以直接掉包证书吗？"></a>中间人可以直接掉包证书吗？</h4><p>那么中间人无法修改证书内容，那么中间人直接把整个证书换掉能不能呢？也是不可以的，首先中间人可以通过CA机构获得CA颁发的证书，如果直接把中间人直接把整个证书进行掉包，发送给浏览器。因为证书内部有域名等相关信息，浏览器一对比就会发现，这个证书不是自己的了</p><h2 id="一些口嗨加密"><a href="#一些口嗨加密" class="headerlink" title="一些口嗨加密"></a>一些口嗨加密</h2><p>在工作的时候我们我们经常会说</p><ul><li>数据base64加密一下</li><li>数据md5加密一下</li></ul><h3 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h3><p>这个是一种编码方式，其目的是将任何数据转换为易移植的字符串，避免了传输过程中失真问题，在处理图片流的时候可以用到</p><h3 id="md5"><a href="#md5" class="headerlink" title="md5"></a>md5</h3><p>MD5算法是一种哈希算法（散列算法），哈希算法的设计目的本身就决定了，它在大多数情况下都是不可逆的，即你通过哈希算法得到的数据，无法经过任何算法还原回去。 所以既然不能将数据还原，也就不能称之为解密；既然不能解密，那么哈希的过程自然也就不能称作是加密了</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在工作中逐渐开始了解并使用到一些加解密手段，加解密涉及到很复杂的密码学，在工作中往往是通过调工具包来解决，所以对整个加解密的背景不是特别清晰，特别是md5加密理论上并不属于加密方式，也是通过后来查阅资料才了解到，所以特此记录一下。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/js/APlayer.min.js&quot; class=&quot;aplayer-se</summary>
      
    
    
    
    <category term="Golang" scheme="https://larmyliu.github.io/categories/Golang/"/>
    
    
    <category term="后端" scheme="https://larmyliu.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Golang" scheme="https://larmyliu.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Cannot Read Property ‘Protocol‘ of Undefined</title>
    <link href="https://larmyliu.github.io/Cannot%20read%20property%20%E2%80%98protocol%E2%80%98%20of%20undefined/"/>
    <id>https://larmyliu.github.io/Cannot%20read%20property%20%E2%80%98protocol%E2%80%98%20of%20undefined/</id>
    <published>2024-06-30T06:49:02.000Z</published>
    <updated>2024-06-30T07:07:26.782Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20201007162309875.png#pic_center" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20201007162520977.png#pic_center" alt="在这里插入图片描述"></p><p>因为采用了外部写api文，在引用时如果写错了就会有这个问题，mark一下</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/js/APlayer.min.js&quot; class=&quot;aplayer-se</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>微信小程序Css报错_at-Rule or Selector Expected</title>
    <link href="https://larmyliu.github.io/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8Fcss%E6%8A%A5%E9%94%99_at-rule%20or%20selector%20expected/"/>
    <id>https://larmyliu.github.io/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8Fcss%E6%8A%A5%E9%94%99_at-rule%20or%20selector%20expected/</id>
    <published>2024-06-30T06:49:02.000Z</published>
    <updated>2024-06-30T07:06:39.645Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>在写微信小程序，前几天还好好的，今天换了一个基础库后发现wxml页面报错了<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2020101515170171.png#pic_center" alt="在这里插入图片描述"><br>错误提示<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20201015151723341.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpdWFybXlsaXU=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>虽然页面能够显示，功能能够使用，但是看得很不舒服</p><p>如何修改：<br>在微信开发者工具右下角，把HTML换成XML<br>更改前：<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20201015151839181.png#pic_center" alt="在这里插入图片描述"></p><p>更改后：<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20201015151901997.png#pic_center" alt="在这里插入图片描述"><br>就没有报错了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/js/APlayer.min.js&quot; class=&quot;aplayer-se</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>错误_Module Parse Failed_ Unexpected Character &#39;�&#39; (1_0)的解决方法</title>
    <link href="https://larmyliu.github.io/%E9%94%99%E8%AF%AF_Module%20parse%20failed_%20Unexpected%20character%20&#39;%EF%BF%BD&#39;%20(1_0)%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>https://larmyliu.github.io/%E9%94%99%E8%AF%AF_Module%20parse%20failed_%20Unexpected%20character%20&#39;%EF%BF%BD&#39;%20(1_0)%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</id>
    <published>2024-06-30T06:49:02.000Z</published>
    <updated>2024-06-30T07:05:37.025Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>今天在用webpack打包文件时报错</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">ERROR</span> <span class="keyword">in</span> ./src/img/head4.<span class="property">jpg</span> <span class="number">1</span>:<span class="number">0</span></span><br><span class="line"><span class="title class_">Module</span> parse <span class="attr">failed</span>: <span class="title class_">Unexpected</span> character <span class="string">&#x27;�&#x27;</span> (<span class="number">1</span>:<span class="number">0</span>)</span><br><span class="line"><span class="title class_">You</span> may need an appropriate loader to handle <span class="variable language_">this</span> file type, currently no loaders are configured to process <span class="variable language_">this</span> file. <span class="title class_">See</span> <span class="attr">https</span>:<span class="comment">//webpack.js.org/concepts#loaders</span></span><br><span class="line">(<span class="title class_">Source</span> code omitted <span class="keyword">for</span> <span class="variable language_">this</span> binary file)</span><br><span class="line"> @ ./src/js/ebtry.<span class="property">js</span> <span class="number">4</span>:<span class="number">11</span>-<span class="number">38</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200210160034136.png" alt="在这里插入图片描述"><br>提示有不希望出现的错误字符</p><p>查阅资料<br>1.检查自己的file-loader和url-loader是否下载正确</p><p>检查下载都正确<br>看看自己写的webpack.config.js<br>我在写的时候写成了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">test</span>:<span class="regexp">/.(png | jpg | gif | svg)$/</span>, <span class="attr">use</span>:[<span class="string">&#x27;url-loader?limit=8192&amp;name=./[name].[ext]&#x27;</span>]&#125;</span><br></pre></td></tr></table></figure><p>里面有空格<br>把空格删除后<br>再进行<code>webpack</code>，先不要用<code>webpack -w</code></p><p>成功解决</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/js/APlayer.min.js&quot; class=&quot;aplayer-se</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>/root/blog/Larmyliu.github.io/source/_posts/（git）Failed to Connect to 127.0.0.1 Port 50462_ Connection Refused</title>
    <link href="https://larmyliu.github.io/%EF%BC%88git%EF%BC%89Failed%20to%20connect%20to%20127.0.0.1%20port%2050462_%20Connection%20refused/"/>
    <id>https://larmyliu.github.io/%EF%BC%88git%EF%BC%89Failed%20to%20connect%20to%20127.0.0.1%20port%2050462_%20Connection%20refused/</id>
    <published>2024-06-30T06:49:02.000Z</published>
    <updated>2024-06-30T07:04:24.088Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>想利用hexo搭建一个个人博客，但是发现hexo init的时候一直被refused了。<br>但是在git里面查了<code>git config --global http.proxy</code>并没有显示我有用代理<br>查了端口号什么的都显示没有</p><p>最后，找到一个方法<br>在电脑查找<code>.gitconfig</code>文件，要在c盘的那个，点开来把<code>proxy</code>全部删掉，再hexo init 就成功了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/js/APlayer.min.js&quot; class=&quot;aplayer-se</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>CDN字体跨域问题</title>
    <link href="https://larmyliu.github.io/CDN%E5%AD%97%E4%BD%93%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
    <id>https://larmyliu.github.io/CDN%E5%AD%97%E4%BD%93%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</id>
    <published>2024-06-30T06:47:11.000Z</published>
    <updated>2024-06-30T06:58:25.724Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>用vue写了一个h5移动端页面，因为涉及到了很多动图所以用了腾讯云的CDN加速，但是出现了一个神奇的问题，图片类都可以使用CDN地址，但是字体文件浏览器却报了跨域错误</p><p>原因是：字体文件在CDN服务器上、项目部署在后端的服务器</p><p>然后<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200929195427816.png#pic_center" alt="在这里插入图片描述"><br>解决方法是：</p><p>将字体文件转成base64，这个<a href="https://transfonter.org/">网站</a>可以转换<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200929195603934.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpdWFybXlsaXU=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>记得要把这个勾上</p><p>然后把里面的css，copy到自己的项目要用到的地方，就可以愉快的显示了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/js/APlayer.min.js&quot; class=&quot;aplayer-se</summary>
      
    
    
    
    <category term="前端" scheme="https://larmyliu.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="https://larmyliu.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>CSS3动画之旋转小魔方</title>
    <link href="https://larmyliu.github.io/CSS3%E5%8A%A8%E7%94%BB%E4%B9%8B%E6%97%8B%E8%BD%AC%E5%B0%8F%E9%AD%94%E6%96%B9/"/>
    <id>https://larmyliu.github.io/CSS3%E5%8A%A8%E7%94%BB%E4%B9%8B%E6%97%8B%E8%BD%AC%E5%B0%8F%E9%AD%94%E6%96%B9/</id>
    <published>2024-06-30T06:47:11.000Z</published>
    <updated>2024-06-30T06:58:28.616Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>﻿利用CSS3动画特性的小例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .wapper&#123;</span><br><span class="line">        </span><br><span class="line">            width: 300px;</span><br><span class="line">            height: 300px;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        .box&#123;</span><br><span class="line">            position: absolute;</span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            top: 150px;</span><br><span class="line">            left: 50%;</span><br><span class="line">            animation: move 5s linear infinite;</span><br><span class="line">            margin: 0 auto;</span><br><span class="line">            transform-style: preserve-3d;</span><br><span class="line">            backface-visibility: hidden;</span><br><span class="line">            transform-origin: center;</span><br><span class="line">        &#125;</span><br><span class="line">        .box div&#123;</span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 100px;</span><br><span class="line">            display: inline-block;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            font-size: 16px;</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 100px;</span><br><span class="line">            opacity: 0.7;</span><br><span class="line">        &#125;</span><br><span class="line">        .box div:nth-of-type(1)&#123;</span><br><span class="line">            background: red;</span><br><span class="line">            left: 0px;</span><br><span class="line">            transform: rotateY(90deg) translateZ(50px) translateX(50px);</span><br><span class="line">        &#125;</span><br><span class="line">        .box div:nth-of-type(2)&#123;</span><br><span class="line">            background: yellow;</span><br><span class="line">            left: 100px;</span><br><span class="line">        &#125;</span><br><span class="line">        .box div:nth-of-type(3)&#123;</span><br><span class="line">            background: blue;</span><br><span class="line">            left: 200px;</span><br><span class="line">            transform:  rotateY(-90deg) translateZ(50px) translateX(-50px);</span><br><span class="line">        &#125;</span><br><span class="line">        .box div:nth-of-type(4)&#123;</span><br><span class="line">            background: green;</span><br><span class="line">            left: 300px;</span><br><span class="line">            transform: translateX(-200px) translateZ(-100px);</span><br><span class="line">        &#125;</span><br><span class="line">        .box div:nth-of-type(5)&#123;</span><br><span class="line">            position: absolute;</span><br><span class="line">            background: purple;</span><br><span class="line">            top: 0px;</span><br><span class="line">            left: 100px;</span><br><span class="line">            transform: rotateX(90deg) translateZ(-50px) translateY(-50px)</span><br><span class="line">        &#125;</span><br><span class="line">        .box div:nth-of-type(6)&#123;</span><br><span class="line">            top: 200px;</span><br><span class="line">            left: 100px;</span><br><span class="line">            background: darkkhaki;</span><br><span class="line">            transform: rotateX(-90deg) translateZ(-50px) translateY(50px);</span><br><span class="line">        &#125;</span><br><span class="line">        @keyframes move&#123;</span><br><span class="line">            0%&#123;</span><br><span class="line">                transform: rotateX(0deg) rotateY(0deg);</span><br><span class="line">            &#125;</span><br><span class="line">            100%&#123;</span><br><span class="line">                transform: rotateX(360deg) rotateY(360deg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class=&quot;wapper&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;box&quot;&gt;</span><br><span class="line">            &lt;div&gt;1&lt;/div&gt;</span><br><span class="line">            &lt;div&gt;2&lt;/div&gt;</span><br><span class="line">            &lt;div&gt;3&lt;/div&gt;</span><br><span class="line">            &lt;div&gt;4&lt;/div&gt;</span><br><span class="line">            &lt;div&gt;5&lt;/div&gt;</span><br><span class="line">            &lt;div&gt;6&lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>通过折叠变换，3d操作，把6个正方形拼成魔方<br>总结一下在2d和3d中坐标轴的方向来判断translate和rotate的方向<br>坐标轴横X竖Y面朝自己是Z轴<br>在2d中translateZ和translateX方向是一样的</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/js/APlayer.min.js&quot; class=&quot;aplayer-se</summary>
      
    
    
    
    <category term="前端" scheme="https://larmyliu.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="https://larmyliu.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>DOM Ready时间如何获取？如何优化</title>
    <link href="https://larmyliu.github.io/DOM%20Ready%E6%97%B6%E9%97%B4%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%EF%BC%9F%E5%A6%82%E4%BD%95%E4%BC%98%E5%8C%96/"/>
    <id>https://larmyliu.github.io/DOM%20Ready%E6%97%B6%E9%97%B4%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%EF%BC%9F%E5%A6%82%E4%BD%95%E4%BC%98%E5%8C%96/</id>
    <published>2024-06-30T06:47:11.000Z</published>
    <updated>2024-06-30T07:08:06.214Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="DOM-Ready时间如何获取？如何优化"><a href="#DOM-Ready时间如何获取？如何优化" class="headerlink" title="DOM Ready时间如何获取？如何优化"></a>DOM Ready时间如何获取？如何优化</h2><p>高级浏览器通过DOMContentLoaded事件获取。</p><p>低版本webkit内核浏览器可以通过轮询document.readyState来实现</p><p>ie中可以通过setTimeout不断调用documentElement的doScroll方法，直到其可用来实现</p><p>优化建议：</p><p>减少dom结构的复杂度，节点尽可能少，嵌套不要太深</p><p>优化关键呈现路径</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/js/APlayer.min.js&quot; class=&quot;aplayer-se</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Failed to Load Font https___img.yzcdn.cn_vant_vant-Icon-d3825a.woff2 net__ERR_CACHE_MISS</title>
    <link href="https://larmyliu.github.io/Failed%20to%20load%20font%20https___img.yzcdn.cn_vant_vant-icon-d3825a.woff2%20net__ERR_CACHE_MISS/"/>
    <id>https://larmyliu.github.io/Failed%20to%20load%20font%20https___img.yzcdn.cn_vant_vant-icon-d3825a.woff2%20net__ERR_CACHE_MISS/</id>
    <published>2024-06-30T06:47:11.000Z</published>
    <updated>2024-06-30T07:08:23.987Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>在微信开发者工具引入了vant weapp 库，但是在使用icon的时候，在开发者工具中无法显示icon，以及报错<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200720091826877.png" alt="在这里插入图片描述"><br>在github上找到了一些回答<br><a href="https://github.com/youzan/vant-weapp/issues/1354">github</a></p><p>出现这个错误是开发者工具的问题，启用真机调试，看看真机上会不会有这个问题。如果真机上可以显示，那么就更新你的开发者工具（下载最新那版），之后再开发者工具里就可以看见图标了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/js/APlayer.min.js&quot; class=&quot;aplayer-se</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>HTTP常见状态码</title>
    <link href="https://larmyliu.github.io/HTTP%E5%B8%B8%E8%A7%81%E7%8A%B6%E6%80%81%E7%A0%81/"/>
    <id>https://larmyliu.github.io/HTTP%E5%B8%B8%E8%A7%81%E7%8A%B6%E6%80%81%E7%A0%81/</id>
    <published>2024-06-30T06:47:11.000Z</published>
    <updated>2024-06-30T06:55:19.539Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>﻿网络中的状态码有五大类：1xx（临时响应），2xx（成功），3xx（重定向），4xx（请求错误），5xx（服务器错误）</p><p><strong>1xx（临时响应）</strong><br>100 (继续) 请求者应当继续提出请求。 服务器返回此代码表示已收到请求的第一部分，正在等待其余部分。</p><p>101 (切换协议) 请求者已要求服务器切换协议，服务器已确认并准备切换。</p><p><strong>2xx（成功）</strong><br>200 (成功) 服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页。</p><p>201 (已创建) 请求成功并且服务器创建了新的资源。</p><p>202 (已接受) 服务器已接受请求，但尚未处理。</p><p>203 (非授权信息) 服务器已成功处理了请求，但返回的信息可能来自另一来源。</p><p>204 (无内容) 服务器成功处理了请求，但没有返回任何内容。</p><p>205 (重置内容) 服务器成功处理了请求，但没有返回任何内容。</p><p>206 (部分内容) 服务器成功处理了部分 GET 请求。</p><p><strong>3xx（重定向）</strong><br>300 (多种选择) 针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。</p><p>301 (永久移动) 请求的网页已永久移动到新位置。 服务器返回此响应(对 GET 或 HEAD 请求的响应)时，会自动将请求者转到新位置。</p><p>302 (临时移动) 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</p><p>303 (查看其他位置) 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。</p><p>304 (未修改) 自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容。</p><p>305 (使用代理) 请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理。</p><p>307 (临时重定向) 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</p><p><strong>4xx（请求错误）</strong><br>400 (错误请求) 服务器不理解请求的语法。</p><p>401 (未授权) 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。</p><p>403 (禁止) 服务器拒绝请求。</p><p>404 (未找到) 服务器找不到请求的网页。</p><p>405 (方法禁用) 禁用请求中指定的方法。</p><p>406 (不接受) 无法使用请求的内容特性响应请求的网页。</p><p>407 (需要代理授权) 此状态代码与 401(未授权)类似，但指定请求者应当授权使用代理。</p><p>408 (请求超时) 服务器等候请求时发生超时。</p><p>409 (冲突) 服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。</p><p>410 (已删除) 如果请求的资源已永久删除，服务器就会返回此响应。</p><p>411 (需要有效长度) 服务器不接受不含有效内容长度标头字段的请求。</p><p>412 (未满足前提条件) 服务器未满足请求者在请求中设置的其中一个前提条件。</p><p>413 (请求实体过大) 服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。</p><p>414 (请求的 URI 过长) 请求的 URI(通常为网址)过长，服务器无法处理。</p><p>415 (不支持的媒体类型) 请求的格式不受请求页面的支持。</p><p>416 (请求范围不符合要求) 如果页面无法提供请求的范围，则服务器会返回此状态代码。</p><p>417 (未满足期望值) 服务器未满足”期望”请求标头字段的要求。</p><p><strong>5xx（服务器错误）</strong><br>500 (服务器内部错误) 服务器遇到错误，无法完成请求。</p><p>501 (尚未实施) 服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。</p><p>502 (错误网关) 服务器作为网关或代理，从上游服务器收到无效响应。</p><p>503 (服务不可用) 服务器目前无法使用(由于超载或停机维护)。 通常，这只是暂时状态。</p><p>504 (网关超时) 服务器作为网关或代理，但是没有及时从上游服务器收到请求。</p><p>505 (HTTP 版本不受支持) 服务器不支持请求中所用的 HTTP 协议版本。</p><p>在我开发过程中，比较常见遇到的状态码有</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">200</span>/<span class="variable constant_">OK</span></span><br><span class="line"><span class="number">304</span></span><br><span class="line"><span class="number">400</span>/对方服务器可能没开</span><br><span class="line"><span class="number">404</span>/无法访问到资源，看看接口地址</span><br><span class="line"><span class="number">500</span>开头的是后端服务器的问题但是也有可能是前端在传递参数的</span><br><span class="line">过程中,格式或者名字不对，看看后端错误日志就能知道是什么问题了</span><br><span class="line"><span class="number">500</span></span><br><span class="line"><span class="number">503</span></span><br><span class="line"><span class="number">504</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/js/APlayer.min.js&quot; class=&quot;aplayer-se</summary>
      
    
    
    
    <category term="前端" scheme="https://larmyliu.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="https://larmyliu.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript之instanceof底层原理</title>
    <link href="https://larmyliu.github.io/JavaScript%E4%B9%8Binstanceof%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/"/>
    <id>https://larmyliu.github.io/JavaScript%E4%B9%8Binstanceof%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/</id>
    <published>2024-06-30T06:47:11.000Z</published>
    <updated>2024-06-30T06:55:19.543Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="JavaScript之instanceof底层原理"><a href="#JavaScript之instanceof底层原理" class="headerlink" title="JavaScript之instanceof底层原理"></a>JavaScript之instanceof底层原理</h2><p>instanceof可以用来判断某个实例是否属于某个它的父类型，也可以判断某个引用是否属于某个构造函数</p><h3 id="instanceof底层是怎么工作的"><a href="#instanceof底层是怎么工作的" class="headerlink" title="instanceof底层是怎么工作的"></a>instanceof底层是怎么工作的</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">_instanceof</span>(<span class="params">L,R</span>)&#123;</span><br><span class="line"><span class="keyword">let</span> R_prototype = R.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">    <span class="keyword">let</span> L_proto = L.<span class="property">__proto__</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(L_proto === <span class="literal">null</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(L_proto === R_prototype)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        L_proto = L_proto.<span class="property">__proto__</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试一下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name,age,sex</span>)&#123;</span><br><span class="line"> </span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line"> </span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line"> </span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">sex</span> = sex;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">score</span>)&#123;</span><br><span class="line"> </span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">score</span> = score;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> per = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;小明&quot;</span>,<span class="number">20</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stu = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">98</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(per <span class="keyword">instanceof</span> <span class="title class_">Person</span>);  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stu <span class="keyword">instanceof</span> <span class="title class_">Student</span>);  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(per <span class="keyword">instanceof</span> <span class="title class_">Object</span>);  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stu <span class="keyword">instanceof</span> <span class="title class_">Object</span>);  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">_instanceof</span>(per, <span class="title class_">Person</span>))<span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">_instanceof</span>(stu, <span class="title class_">Student</span>))<span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">_instanceof</span>(per, <span class="title class_">Object</span>))<span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">_instanceof</span>(stu, <span class="title class_">Object</span>))<span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">_instanceof</span>(per, <span class="title class_">Student</span>))<span class="comment">// false</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/js/APlayer.min.js&quot; class=&quot;aplayer-se</summary>
      
    
    
    
    <category term="前端" scheme="https://larmyliu.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="https://larmyliu.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript之原型和原型链</title>
    <link href="https://larmyliu.github.io/JavaScript%E4%B9%8B%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <id>https://larmyliu.github.io/JavaScript%E4%B9%8B%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/</id>
    <published>2024-06-30T06:47:11.000Z</published>
    <updated>2024-06-30T06:55:19.547Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>﻿## JavaScript之原型和原型链</p><p>在JavaScript的学习过程中，原型链肯定是一个很重要的知识点，下面我们就来深入的去看一下原型链</p><h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h3><p>首先看一个很简单的例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">sayName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;i am &quot;</span>+<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayAge</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;i am &quot;</span>+<span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;ljm&quot;</span>,<span class="number">18</span>)</span><br><span class="line">        person1.<span class="title function_">sayAge</span>();</span><br><span class="line">        person1.<span class="title function_">sayName</span>();</span><br><span class="line">        <span class="keyword">var</span> person2 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;lll&quot;</span>,<span class="number">20</span>);</span><br><span class="line">        person2.<span class="title function_">sayAge</span>();</span><br><span class="line">        person2.<span class="title function_">sayName</span>();</span><br></pre></td></tr></table></figure><p>控制台输出的是，和大多数人预想的一样，输出了两个person的年龄和姓名</p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200712234246940.png" alt="在这里插入图片描述"></p><p>在这个过程中我们创建了两个实例对象（person1，person2），有一个构造函数（Person）和原型（Person.prototype），那么他们之间的关系应该是这样的</p><p>在这里插入图片描述<br>在这个关系上我们可以看出</p><ol><li>每个函数上面都有一个属性(prototype)指向了函数的原型对象(Person.prototype)。</li><li>每个实例上面都有一个隐式原型(proto)指向了函数的原型对象，如本利的p1对象有一个隐式原型也指向了Person.prototype对象。</li><li>每个函数的原型对象上面都有一个constructor属性，指向了构造函数本身。</li></ol><p>实例的（person1，person2）的<code>__proto__</code>也是Person.prototype</p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200712234355210.png" alt="在这里插入图片描述"></p><p>那么在实例访问属性或者方法的时候应该遵循什么样的原则？</p><ol><li>如果实例上面存在，就用实例本身的属性和方法。</li><li>如果实例上面不存在，就会顺着<code>__proto__</code>的指向一直往上查找，找到就停止，找不到就报错。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">sayName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;i am &quot;</span>+<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayAge</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是原型上的sayAge&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;ljm&quot;</span>,<span class="number">18</span>)</span><br><span class="line">        person1.<span class="property">sayAge</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是person1上的sayAge&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        person1.<span class="title function_">sayAge</span>();</span><br><span class="line">        person1.<span class="title function_">sayName</span>();</span><br><span class="line">        <span class="keyword">var</span> person2 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;lll&quot;</span>,<span class="number">20</span>);</span><br><span class="line">        person2.<span class="title function_">sayAge</span>();</span><br><span class="line">        person2.<span class="title function_">sayName</span>();</span><br><span class="line">person2.<span class="title function_">sayHello</span>();</span><br></pre></td></tr></table></figure><p>那么输出的结果就是</p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200712234520190.png" alt="在这里插入图片描述"></p><p>如果找不到这个方法，就报错</p><p>在这里插入图片描述<br>虽然person1和person2都输出了sayAge方法，可是这两个方法是不一样的</p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200712234553921.png" alt="在这里插入图片描述"></p><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>那么在刚刚这个输出sayAge过程大概可以这样描述：</p><p>在person1上有sayAge，所以输出的就是person1上的sayAge</p><p>在person2上没有sayAge，但是在person2的原型上有sayAge，所以输出的就是person2上的sayAge</p><p>简单点说就是，如果我自己有，我就用我自己的；如果我没有，则去我的上一级找；这样就形成了一条原型链。上一节中Person的原型其实还有一属性<code>__proto__</code>，他指向了上一级Object的原型对象。</p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200712234610508.png" alt="在这里插入图片描述"><br>Object.prototype可以说是原型中的最高层，那么最终原型链应该是这样的</p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200712234624390.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpdWFybXlsaXU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="原型和实例之间的判断"><a href="#原型和实例之间的判断" class="headerlink" title="原型和实例之间的判断"></a>原型和实例之间的判断</h3><ol><li><p>使用instanceof</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1 <span class="keyword">instanceof</span> <span class="title class_">Person</span>)<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1 <span class="keyword">instanceof</span> <span class="title class_">Object</span>)<span class="comment">//true</span></span><br></pre></td></tr></table></figure></li><li><p>使用isPrototypeOf()方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">isPrototypeOf</span>(person1))<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">isPrototypeOf</span>(person1))<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">isPrototypeOf</span>(person1))<span class="comment">//false</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="在ES6中的新运用"><a href="#在ES6中的新运用" class="headerlink" title="在ES6中的新运用"></a>在ES6中的新运用</h3><p>在ES6中，新运用了class来对JavaScript的语法更加加以完善。</p><p>在其他语言中，例如java，就有类（class），里面有构造函数（constructor），属性，方法等</p><p>所以在ES6中，为了弥补之前的不足，新推出了class</p><p>在以前的js中，生成一个对象实例，需要先定义构造函数，然后通过prototype 的方式来添加方法，再生成实例，但是现在ES6可以这样写</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">age,name</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">sayName</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是&quot;</span>+<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">18</span>,<span class="string">&quot;ljm&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="property">name</span>)<span class="comment">//ljm</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="property">age</span>)<span class="comment">//18</span></span><br><span class="line">person1.<span class="title function_">sayName</span>()<span class="comment">//我是ljm</span></span><br></pre></td></tr></table></figure><p>在ES5中原本的构造函数被constructor 替代，本来需要定义在prototype上面的，方法直接定义在class里面即可。</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>在ES6中可以使用extends来继承类（和java差不多）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span>&#123;</span><br><span class="line">            <span class="title function_">constructor</span>(<span class="params">age,name,className</span>)&#123;</span><br><span class="line">                <span class="variable language_">super</span>(age,name);</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">className</span> = className;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_">sayClass</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是&quot;</span>+<span class="variable language_">this</span>.<span class="property">className</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> student1 = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">19</span>,<span class="string">&quot;ljm&quot;</span>,<span class="string">&quot;四班&quot;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(student1.<span class="property">age</span>)<span class="comment">//19</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(student1.<span class="property">name</span>)<span class="comment">//ljm</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(student1.<span class="property">className</span>)<span class="comment">//四班</span></span><br><span class="line">        student1.<span class="title function_">sayClass</span>()<span class="comment">//我是四班</span></span><br><span class="line">        student1.<span class="title function_">sayName</span>()<span class="comment">//我是ljm</span></span><br></pre></td></tr></table></figure><p>在ES5中prototype的继承</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">age,name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是&quot;</span>+<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">age,name,className</span>) &#123;</span><br><span class="line">    <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>,age,name);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">className</span> = className;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Student</span>;</span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>;</span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayClass</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是&quot;</span>+<span class="variable language_">this</span>.<span class="property">className</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> student1 = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">19</span>,<span class="string">&quot;ljm&quot;</span>,<span class="string">&quot;四班&quot;</span>)</span><br><span class="line">student1.<span class="title function_">sayClass</span>();</span><br><span class="line">student1.<span class="title function_">sayName</span>();</span><br></pre></td></tr></table></figure><p>在ES6语法上更加便捷</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/js/APlayer.min.js&quot; class=&quot;aplayer-se</summary>
      
    
    
    
    <category term="前端" scheme="https://larmyliu.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="https://larmyliu.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript之执行上下文（EC）</title>
    <link href="https://larmyliu.github.io/JavaScript%E4%B9%8B%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%EF%BC%88EC%EF%BC%89/"/>
    <id>https://larmyliu.github.io/JavaScript%E4%B9%8B%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%EF%BC%88EC%EF%BC%89/</id>
    <published>2024-06-30T06:47:11.000Z</published>
    <updated>2024-06-30T06:55:19.551Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>﻿## JavaScript之执行上下文（EC）</p><p>在JavaScript中，执行上下文是一个基本概念，在执行上下文中，包括了变量对象（VO，Variable Object），作用域链（Scope Chain），this指向等，在闭包，函数&#x2F;变量提升息息相关</p><h3 id="执行上下文"><a href="#执行上下文" class="headerlink" title="执行上下文"></a>执行上下文</h3><p>执行上下文可以理解为执行环境，执行环境定义了变量或者函数有权访问其他数据，决定他们各自的行为，执行环境主要包括了<strong>全局上下文</strong>，<strong>函数上下文</strong>，<strong>eval执行上下文</strong>。主要理解的是全局上下文和函数上下文。</p><p>在JavaScript代码执行的过程中，首先进入的就是全局环境，每个函数都有自己的执行环境。所以我们分别叫他们全局上下文和函数上下文</p><h3 id="如何执行"><a href="#如何执行" class="headerlink" title="如何执行"></a>如何执行</h3><p>执行上下文是以栈的方式被存放起来的，称这个栈为执行上下文栈。</p><p>在JavaScript代码开始执行时，将全局上下文创建并入栈，当调用函数时，会进入对应函数的环境，创建函数上下文并入栈，当栈顶的执行上下文代码执行完毕后，则将其出栈。</p><p>一个简单的例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fn2&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fn1&#x27;</span>)</span><br><span class="line">  <span class="title function_">fn2</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn1</span>();</span><br></pre></td></tr></table></figure><p>执行过程中的执行上下文栈</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 伪代码 以数组来表示执行上下文栈 ECStack=[] */</span></span><br><span class="line"><span class="comment">// 代码执行时最先进入全局环境，全局上下文被创建并入栈</span></span><br><span class="line"><span class="title class_">ECStack</span>.<span class="title function_">push</span>(global_EC);</span><br><span class="line"><span class="comment">// fn1 被调用，fn1 函数上下文被创建并入栈</span></span><br><span class="line"><span class="title class_">ECStack</span>.<span class="title function_">push</span>(fn1_EC);</span><br><span class="line"><span class="comment">// fn1 中调用 fn2，fn2 函数上下文被创建并入栈</span></span><br><span class="line"><span class="title class_">ECStack</span>.<span class="title function_">push</span>(fn2_EC);</span><br><span class="line"><span class="comment">// fn2 执行完毕，fn2 函数上下文出栈</span></span><br><span class="line"><span class="title class_">ECStack</span>.<span class="title function_">pop</span>();</span><br><span class="line"><span class="comment">// fn1 执行完毕，fn1 函数上下文出栈</span></span><br><span class="line"><span class="title class_">ECStack</span>.<span class="title function_">pop</span>();</span><br><span class="line"><span class="comment">// 代码执行完毕，全局上下文出栈</span></span><br><span class="line"><span class="title class_">ECStack</span>.<span class="title function_">pop</span>();</span><br></pre></td></tr></table></figure><p>在一个执行上下文中，最重要的三个属性分别是<strong>变量对象（Variable Object）</strong>、<strong>作用域链（Scope Chain）</strong>和 <strong>this 指向</strong>。</p><p>我们可以采用如下方式表示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">EC</span> = &#123;</span><br><span class="line">  <span class="variable constant_">VO</span>,</span><br><span class="line">  <span class="variable constant_">SC</span>,</span><br><span class="line">  <span class="variable language_">this</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个执行上下文的生命周期分为<strong>创建</strong>和<strong>执行</strong>阶段。创建阶段主要工作是<strong>生成变量对象</strong>、<strong>建立作用域链</strong>和<strong>确定 this 指向</strong>。而执行阶段主要工作是变量赋值以及执行其它代码等。</p><h3 id="变量对象（VO）"><a href="#变量对象（VO）" class="headerlink" title="变量对象（VO）"></a>变量对象（VO）</h3><p>在执行上下文的创建阶段会生成变量对象，主要是以下三个过程</p><ol><li><strong>检索当前上下文中的参数</strong>，该过程生成的Arguments对象，并建立形参</li><li><strong>检索当前上下文中的函数声明</strong>，该过程建立以函数名为属性名，函数所在内存地址引用为属性值的属性；</li><li><strong>检索当前上下文中的变量声明</strong>，该过程建立以变量名为属性名，undefined 为属性值的属性（如果变量名跟已声明的形参变量名或函数名相同，则<strong>该变量声明</strong>不会干扰已经存在的这类属性）。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">VO</span> = &#123;</span><br><span class="line">  <span class="title class_">Arguments</span>: &#123;&#125;, </span><br><span class="line">  <span class="title class_">ParamVariable</span>: 具体值,  <span class="comment">//函数传递的形参变量</span></span><br><span class="line">  <span class="title class_">Function</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">function</span> <span class="attr">reference</span>&gt;</span>,</span></span><br><span class="line"><span class="language-xml">  Variable:undefined//内部声明的变量</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br></pre></td></tr></table></figure><p>当执行上下文进入执行状态后，变量对象会变为<strong>活动对象</strong>（Active Object，AO），此时声明的变量会进行赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">AO</span> = &#123;</span><br><span class="line">  <span class="title class_">Arguments</span>: &#123;&#125;,</span><br><span class="line">  <span class="title class_">ParamVariable</span>: 具体值,  <span class="comment">//函数传递的形参变量</span></span><br><span class="line">  <span class="title class_">Function</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">function</span> <span class="attr">reference</span>&gt;</span>,</span></span><br><span class="line"><span class="language-xml">  Variable:具体值//内部声明的变量</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br></pre></td></tr></table></figure><p>同样举例来表明变化情况</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params">a</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  <span class="keyword">var</span> c = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn1</span>(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>在创建阶段</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">VO</span> = &#123;</span><br><span class="line"><span class="title class_">Arguments</span>:&#123;</span><br><span class="line"><span class="string">&#x27;0&#x27;</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="attr">length</span>:<span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">a</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="attr">b</span>:<span class="literal">undefined</span>,</span><br><span class="line">    <span class="attr">fn2</span>:<span class="language-xml"><span class="tag">&lt;<span class="name">function</span> <span class="attr">fn2</span> <span class="attr">reference</span>&gt;</span>,</span></span><br><span class="line"><span class="language-xml">    c:undefined</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br></pre></td></tr></table></figure><p>在执行阶段</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">AO</span> = &#123;</span><br><span class="line"><span class="title class_">Arguments</span>:&#123;</span><br><span class="line"><span class="string">&#x27;0&#x27;</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="attr">length</span>:<span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">a</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="attr">b</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">fn2</span>:&lt;function fn2 reference&gt;,</span><br><span class="line">    c:&lt;function express c reference&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>理解后就可以更好的指导<strong>函数提升</strong>和<strong>变量提升</strong>的内在机制</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)<span class="comment">//undefined</span></span><br><span class="line"><span class="title function_">fn</span>(<span class="number">0</span>);<span class="comment">//fn</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fn&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在全局上下文的创建阶段，先会检索函数声明和变量声明，函数声明会被赋值具体引用地址，变量声明会赋值undefined</p><p>所以具体执行应该是这样的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fn&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="literal">undefined</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)<span class="comment">//undefined</span></span><br><span class="line"><span class="title function_">fn</span>(<span class="number">0</span>)<span class="comment">//fn</span></span><br><span class="line">a = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h3 id="作用域链（Scope-Chain）"><a href="#作用域链（Scope-Chain）" class="headerlink" title="作用域链（Scope Chain）"></a>作用域链（Scope Chain）</h3><p><strong>作用域链是指由当前上下文和上下层上下文的一系列变量对象形成的层级链</strong>。保证了当前执行环境对符合访问权限的变量和函的有序访问</p><p>在执行上下文分成两个阶段，一个是创建一个是执行。在执行上下文阶段，如果需要查找某个变量或者函数时，会从当前上下文中查找，如果没有找到，就会沿着上层上下文进行查找，直到找到全局上下文</p><p>来个简单的例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn3</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);<span class="comment">//1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">fn3</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">fn2</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn1</span>()</span><br></pre></td></tr></table></figure><p>作用域链是fn3→fn2→fn1→global，从fn3的作用域中开始查找a，找不到一直往上查找，最终在全局环境下找到了a</p><p>作用域访问就是里面可以访问外面的，外面的不能访问里面的。</p><p>执行上下文中的作用域链是如何建立的？</p><p>在JavaScript中主要包含了全局作用域和函数作用域，函数作用域是在函数被声明的时候确定的。</p><p>每一个函数都会包含一个[[scope]]内部属性，在函数被声明的时候，该函数的[[scope]]属性会保存其上下文的变量对象，形成层级链。**[[scope]]属性的值是在函数被声明的时候确定的**</p><p>在函数调用的时候，其执行上下文会被创建并且入栈。在创建阶段生成的变量对象，会将该变量对象添加到作用域的顶端并将[[scope]]添加进该作用域链中，在执行阶段，变量对象会变成活动对象，相应属性被赋值。</p><p>所以，作用域链是由当前上下文变量对象及上层上下文变量对象组成的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">SC</span> = <span class="variable constant_">AO</span> + [[scope]]</span><br></pre></td></tr></table></figure><p>来一个例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> c = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">fn2</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn1</span>();</span><br></pre></td></tr></table></figure><p>在创建阶段，fn1中fn2被声明，所以</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fn2.[[scope]]=[fn1_EC.<span class="property">VO</span>, globalObj]</span><br></pre></td></tr></table></figure><p>当 fn2 被调用的时候，其执行上下文被创建并入栈，此时会将生成的变量对象添加进作用域链的顶端，并且将 [[scope]] 添加进作用域链</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fn2_EC.<span class="property">SC</span>=[fn2_EC.<span class="property">VO</span>].<span class="title function_">concat</span>(fn2.[[scope]])</span><br><span class="line">=&gt;</span><br><span class="line">fn2_EC.<span class="property">SC</span>=[fn2_EC.<span class="property">VO</span>, fn1_EC.<span class="property">VO</span>, globalObj]</span><br></pre></td></tr></table></figure><h3 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a>this指向</h3><p><strong>this的指向，是在函数被调用的时候确定的</strong>。也就是在执行上下文被创建的时候确定的。</p><p>this 的指向，最主要的是三种场景，分别是<strong>全局上下文中 this</strong>、<strong>函数中 this</strong> 和<strong>构造函数中 this</strong>。</p><h4 id="全局上下文中-this"><a href="#全局上下文中-this" class="headerlink" title="全局上下文中 this"></a>全局上下文中 this</h4><p>在全局上下文中，this 指代全局对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在浏览器环境中，全局对象是window对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span> === <span class="variable language_">window</span>)<span class="comment">//true</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">b</span> = <span class="number">2</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">a</span>)<span class="comment">//1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">b</span>)<span class="comment">//2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b)<span class="comment">//2</span></span><br></pre></td></tr></table></figure><h4 id="函数中的this"><a href="#函数中的this" class="headerlink" title="函数中的this"></a>函数中的this</h4><p><strong>如果被调用的函数，被某一个对象所拥有，那么其内部的 this 指向该对象；如果该函数被独立调用，那么其内部的 this 指向 undefined（非严格模式下指向 window）。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">fn</span>: fn</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">fn</span>(); <span class="comment">// 2</span></span><br><span class="line"><span class="title function_">fn</span>(); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h4 id="构造函数中的this"><a href="#构造函数中的this" class="headerlink" title="构造函数中的this"></a>构造函数中的this</h4><p><strong>对于构造函数来说，其内部 this 指向新创建的对象实例</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ttsy = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;ljm&#x27;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ttsy.<span class="property">name</span>);  <span class="comment">// ljm</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ttsy.<span class="property">age</span>);  <span class="comment">// 18</span></span><br></pre></td></tr></table></figure><p><strong>在 ES6 中箭头函数中，this 是在函数声明的时候确定的，具体可看</strong></p><p><a href>https://es6.ruanyifeng.com/#docs/function</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/js/APlayer.min.js&quot; class=&quot;aplayer-se</summary>
      
    
    
    
    <category term="前端" scheme="https://larmyliu.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="https://larmyliu.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript之模拟实现new</title>
    <link href="https://larmyliu.github.io/JavaScript%E4%B9%8B%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0new/"/>
    <id>https://larmyliu.github.io/JavaScript%E4%B9%8B%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0new/</id>
    <published>2024-06-30T06:47:11.000Z</published>
    <updated>2024-06-30T06:55:19.555Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>﻿## JavaScript之模拟实现new</p><p><code>new</code>是JavaScript的一个关键字，可以实例化构造函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name,age</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;HI! i am &quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;ljm&quot;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="property">age</span>);<span class="comment">//18</span></span><br><span class="line">person1.<span class="title function_">sayHi</span>();<span class="comment">//HI! i am ljm</span></span><br><span class="line">person1.<span class="property">__proto__</span> === <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>;<span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>从这个例子可以看出</p><ol><li><code>new</code>可以实例化一个对象</li><li>这个对象可以访问构造函数的属性</li><li>这个对象可以访问构造函数原型上的属性</li><li>对象的<code>__proto__</code>指向构造函数的原型</li></ol><p>我们来模拟一下new的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">newFunction</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">let</span> res = &#123;&#125;;</span><br><span class="line"><span class="comment">//拿到构造函数，并利用call挂载参数</span></span><br><span class="line">    <span class="keyword">let</span> construct = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">shift</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">res.<span class="property">__proto__</span> = construct.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">    <span class="comment">//第一个参数是所有者，第二个是参数</span></span><br><span class="line">    construct.<span class="title function_">apply</span>(res, <span class="variable language_">arguments</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name,age</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;HI! i am &quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="title function_">newFunction</span>(<span class="title class_">Person</span>, <span class="string">&quot;ljm&quot;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="property">age</span>);<span class="comment">//18</span></span><br><span class="line">person1.<span class="title function_">sayHi</span>();<span class="comment">//HI! i am ljm</span></span><br><span class="line">person1.<span class="property">__proto__</span> === <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>;<span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>输出已经和上面一样了，但是new还有一个特性，如果构造函数return回一个对象，那么new操作返回构造函数的return的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">inside</span>: <span class="string">&quot;test&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;ljm&quot;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="property">name</span>)<span class="comment">//undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="property">inside</span>)<span class="comment">//test</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="property">__proto__</span> === <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>);<span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="property">__proto__</span> === <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>);<span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>再完善一下上面的<code>newFunction</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">newFunction</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">let</span> res = &#123;&#125;;<span class="comment">//也可以写Object.create(null);</span></span><br><span class="line"><span class="comment">//拿到构造函数，并利用call挂载参数</span></span><br><span class="line">    <span class="keyword">let</span> construct = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">shift</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">res.<span class="property">__proto__</span> = construct.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">    <span class="comment">//第一个参数是所有者，第二个是参数</span></span><br><span class="line">    <span class="keyword">let</span> turn = construct.<span class="title function_">apply</span>(res, <span class="variable language_">arguments</span>);</span><br><span class="line">    <span class="keyword">return</span> turn <span class="keyword">instanceof</span> <span class="title class_">Object</span> ? turn : res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="js中new操作符具体做了什么"><a href="#js中new操作符具体做了什么" class="headerlink" title="js中new操作符具体做了什么"></a>js中new操作符具体做了什么</h4><ol><li><p>创建一个空对象，并且把this变量引用该对象，同时继承了该对象的原型</p></li><li><p>属性和方法都被加入到this这个引用对象中</p></li><li><p>新创建的对象有this引用，并且最后隐式返回this</p></li></ol><p><strong>一个简易版的new</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">_new</span>(<span class="params">fn, ...arg</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> obj = <span class="title class_">Object</span>.<span class="title function_">create</span>(fn.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line">    <span class="keyword">const</span> ret = fn.<span class="title function_">apply</span>(obj, arg);</span><br><span class="line">    <span class="keyword">return</span> ret <span class="keyword">instanceof</span> <span class="title class_">Object</span> ? ret : obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/js/APlayer.min.js&quot; class=&quot;aplayer-se</summary>
      
    
    
    
    <category term="前端" scheme="https://larmyliu.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="https://larmyliu.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript之深浅拷贝</title>
    <link href="https://larmyliu.github.io/JavaScript%E4%B9%8B%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    <id>https://larmyliu.github.io/JavaScript%E4%B9%8B%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/</id>
    <published>2024-06-30T06:47:11.000Z</published>
    <updated>2024-06-30T06:55:19.559Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>﻿## JavaScript之深浅拷贝</p><p>了解一下JavaScript中的深浅拷贝，以及他们的手写版</p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>首先肯定要知道的是JavaScript的数据类型，JavaScript的数据类型可以分为两大类<strong>基本数据类型</strong>，<strong>引用数据类</strong>。</p><h4 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h4><ul><li>Number</li><li>Boolean</li><li>String</li><li>Null</li><li>Undefined</li><li>Symbol</li><li>Bigint</li></ul><h4 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h4><ul><li>Function</li><li>Object</li><li>Array</li></ul><p>了解完JavaScript拥有的数据类型后，来看看深浅拷贝</p><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><p>简单的来说就是，基本数据类型完全拷贝他们的数据，引用数据类型就拷贝内存地址</p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><ol><li><p><code>Object.assign()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;ljm&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">like</span>:&#123;</span><br><span class="line"><span class="attr">first</span>: <span class="string">&quot;sleep&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj1 = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;,obj)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">name</span>)<span class="comment">//ljm</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">age</span>)<span class="comment">//18</span></span><br><span class="line">obj1.<span class="property">age</span> = <span class="number">20</span></span><br><span class="line">obj1.<span class="property">like</span>.<span class="property">first</span> = <span class="string">&quot;reading&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">age</span>)<span class="comment">//18</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">age</span>)<span class="comment">//20</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">like</span>.<span class="property">first</span>)<span class="comment">//reading</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">like</span>.<span class="property">first</span>)<span class="comment">//reading</span></span><br></pre></td></tr></table></figure><p>这个是Object中的一个内置函数，可以对Object对象中的数据进行浅复制，name和age是obj对象中的基本数据类型，所以浅复制后obj1改变数据不会改变obj的数据，但是like是引用数据类型，只是复制了地址，所以obj2中like改变属性值也会改变obj中like的属性值。</p></li><li><p>拓展运算符<code>...</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;ljm&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">like</span>:&#123;</span><br><span class="line"><span class="attr">first</span>: <span class="string">&quot;sleep&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;...obj&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">name</span>)<span class="comment">//ljm</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">age</span>)<span class="comment">//18</span></span><br><span class="line">obj1.<span class="property">age</span> = <span class="number">20</span></span><br><span class="line">obj1.<span class="property">like</span>.<span class="property">first</span> = <span class="string">&quot;reading&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">age</span>)<span class="comment">//18</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">age</span>)<span class="comment">//20</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">like</span>.<span class="property">first</span>)<span class="comment">//reading</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">like</span>.<span class="property">first</span>)<span class="comment">//reading</span></span><br></pre></td></tr></table></figure><p>拓展运算符是es6中的语法糖，在Object或Array中都可以使用。</p></li><li><p><code>Array.prototype.slice</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="string">&quot;ljm&quot;</span>, <span class="number">18</span>, [<span class="string">&quot;sleep&quot;</span>]];</span><br><span class="line"><span class="keyword">var</span> arr2 = arr1.<span class="title function_">slice</span>(<span class="number">0</span>);</span><br><span class="line">arr2[<span class="number">1</span>] = <span class="number">20</span>;</span><br><span class="line">arr2[<span class="number">2</span>][<span class="number">1</span>] = <span class="string">&quot;reading&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1[<span class="number">1</span>])<span class="comment">//18;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2[<span class="number">1</span>]);<span class="comment">//20</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1[<span class="number">2</span>][<span class="number">1</span>])<span class="comment">//reading</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2[<span class="number">2</span>][<span class="number">1</span>])<span class="comment">//reading</span></span><br></pre></td></tr></table></figure></li><li><p><code>Array.prototype.concat</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="string">&quot;ljm&quot;</span>, <span class="number">18</span>, [<span class="string">&quot;sleep&quot;</span>]];</span><br><span class="line"><span class="keyword">var</span> arr2 = [].<span class="title function_">concat</span>(arr1)</span><br><span class="line">arr2[<span class="number">1</span>] = <span class="number">20</span>;</span><br><span class="line">arr2[<span class="number">2</span>][<span class="number">1</span>] = <span class="string">&quot;reading&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1[<span class="number">1</span>])<span class="comment">//18;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2[<span class="number">1</span>]);<span class="comment">//20</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1[<span class="number">2</span>][<span class="number">1</span>])<span class="comment">//reading</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2[<span class="number">2</span>][<span class="number">1</span>])<span class="comment">//reading</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><p>深拷贝就是不管是基本数据类型还是引用数据类型都重新拷贝一份， 不存在共用数据的现象</p><h4 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h4><ol><li><p><code>JSON.parse(JSON.stringify(obj))</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;ljm&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">like</span>:&#123;</span><br><span class="line"><span class="attr">first</span>: <span class="string">&quot;sleep&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj1 = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">name</span>)<span class="comment">//ljm</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">age</span>)<span class="comment">//18</span></span><br><span class="line">obj1.<span class="property">age</span> = <span class="number">20</span></span><br><span class="line">obj1.<span class="property">like</span>.<span class="property">first</span> = <span class="string">&quot;reading&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">age</span>)<span class="comment">//18</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">age</span>)<span class="comment">//20</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">like</span>.<span class="property">first</span>)<span class="comment">//sleep</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">like</span>.<span class="property">first</span>)<span class="comment">//reading</span></span><br></pre></td></tr></table></figure><p>存在的问题</p><ol><li>会忽略undefined</li><li>会忽略symbol</li><li>不能序列化函数</li><li>不能解决循环引用的对象</li><li>不能正确处理<code>new Date()</code></li><li>不能处理正则</li><li>不能处理new Error()</li></ol><p>现实中遇到深拷贝的场景很少，而且99%用JSON.stringify可以解决</p></li><li><p>递归处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">copyFunction</span>(<span class="params">func</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> fnStr = func.<span class="title function_">toString</span>()</span><br><span class="line"><span class="keyword">return</span> func.<span class="property"><span class="keyword">prototype</span></span> ? <span class="built_in">eval</span>(<span class="string">`(<span class="subst">$&#123;fnStr&#125;</span>)`</span>) : <span class="built_in">eval</span>(fnStr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deepCopy</span> (obj, cache = []) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> obj === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">copyFunction</span>(obj)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (obj === <span class="literal">null</span> || <span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(obj) === <span class="string">&#x27;[object Date]&#x27;</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>(obj)</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(obj) === <span class="string">&#x27;[object RegExp]&#x27;</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RegExp</span>(obj)</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(obj) === <span class="string">&#x27;[object Error]&#x27;</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Error</span>(obj)</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">const</span> item = cache.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">original</span> === obj)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> (item) <span class="keyword">return</span> item.<span class="property">copy</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> copy = <span class="title class_">Array</span>.<span class="title function_">isArray</span>(obj) ? [] : &#123;&#125;</span><br><span class="line">    cache.<span class="title function_">push</span>(&#123;</span><br><span class="line">        <span class="attr">original</span>: obj,</span><br><span class="line">        copy</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">        copy[key] = <span class="title function_">deepCopy</span>(obj[key], cache)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> copy</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">deepCopy</span>($obj).<span class="property">func</span> === $obj.<span class="property">func</span> <span class="comment">// false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/js/APlayer.min.js&quot; class=&quot;aplayer-se</summary>
      
    
    
    
    <category term="前端" scheme="https://larmyliu.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="https://larmyliu.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript之闭包理解</title>
    <link href="https://larmyliu.github.io/JavaScript%E4%B9%8B%E9%97%AD%E5%8C%85%E7%90%86%E8%A7%A3/"/>
    <id>https://larmyliu.github.io/JavaScript%E4%B9%8B%E9%97%AD%E5%8C%85%E7%90%86%E8%A7%A3/</id>
    <published>2024-06-30T06:47:11.000Z</published>
    <updated>2024-06-30T06:55:19.563Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>﻿## JavaScript之闭包理解</p><p>闭包（Closure）是JavaScript学习过程中一个非常重要的问题</p><p>闭包和执行上下文和作用域链有着千丝万缕的关系。闭包是指<strong>有权访问另一个函数作用域的变量的函数</strong>（JavaScript高级程序设计（第三版）P178）</p><p><strong>闭包是一个函数</strong>，对闭包的一个理解可以是<strong>所在的执行上下文已经出栈,但是仍然访问了其所在的执行上下文变量对象的函数</strong></p><p>这里所指的所在的执行上下文指的是闭包函数对应的执行上下文，而不是闭包本省所对应的执行上下文</p><p>来一个简单的例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">A</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">B</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> B;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">A</span>()();</span><br></pre></td></tr></table></figure><p>那么他的执行上下文栈行为是这样的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*伪代码*/</span></span><br><span class="line"><span class="comment">// 代码执行时最先进入全局环境，全局上下文被创建并入栈</span></span><br><span class="line"><span class="title class_">ECStack</span>.<span class="title function_">push</span>(globalContext);</span><br><span class="line"><span class="comment">// A 被调用，A 函数上下文被创建并入栈</span></span><br><span class="line"><span class="title class_">ECStack</span>.<span class="title function_">push</span>(&lt;A&gt; functionContext);</span><br><span class="line"><span class="comment">// A 执行完毕，A 函数上下文出栈</span></span><br><span class="line"><span class="title class_">ECStack</span>.<span class="title function_">pop</span>();</span><br><span class="line"><span class="comment">// B 被调用，B 函数上下文被创建并入栈</span></span><br><span class="line"><span class="title class_">ECStack</span>.<span class="title function_">push</span>(&lt;B&gt; functionContext);</span><br><span class="line"><span class="comment">// B 执行完毕，B 函数上下文出栈</span></span><br><span class="line"><span class="title class_">ECStack</span>.<span class="title function_">pop</span>();</span><br><span class="line"><span class="comment">// 代码执行完毕，全局上下文出栈</span></span><br><span class="line"><span class="title class_">ECStack</span>.<span class="title function_">pop</span>();</span><br></pre></td></tr></table></figure><p>我们都知道，JavaScript 拥有自动的垃圾回收机制，当一个值失去引用的时候，垃圾回收机制会根据特殊的算法找到它并将其回收。</p><p><strong>函数的执行上下文在出栈后，其变量对象会失去引用等待被回收，而闭包的存在会阻止这一过程，因为闭包的作用域链包含了其所在执行上下文的变量对象。</strong></p><p>通过上面的代码可以看出，在B函数执行的时候，A的上下文已经出栈了，按照JavaScript的垃圾回收机制，A上下文的变量对象失去引用后会被垃圾回收机制回收，但是由于B上下文作用域链包含了A上下文的变量对象，所以A上下文的变量对象不会被垃圾回收机制回收。</p><p>我们知道<strong>函数作用域是在函数被定义（声明）的时候确定的</strong>。每一个函数都会包含一个[[scope]]内部属性，在函数被定义的时候，该函数的[[scope]]属性会保存其上层上下文的变量对象，形成包含上层上下文变量对象的层级链。</p><p>那么刚刚的代码上下文应该是这样的,在创建的时候</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">B.[[scope]]=[<span class="title class_">AContext</span>.<span class="property">VO</span>,globalContext.<span class="property">VO</span>]</span><br></pre></td></tr></table></figure><p>在B被调用的时候，其执行上下文会被创建并入栈，此时会生成变量对象并将该变量对象添加进作用域链的顶端，并将[[scope]]添加进作用域链</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">BContext</span>.<span class="property">Scope</span> = [<span class="title class_">BContext</span>.<span class="property">VO</span>].<span class="title function_">concat</span>(B.[[scope]])</span><br><span class="line">=&gt;</span><br><span class="line"><span class="title class_">BContext</span>.<span class="property">Scope</span> = [<span class="title class_">BContext</span>.<span class="property">VO</span>,<span class="title class_">AContext</span>.<span class="property">VO</span>,globalContext.<span class="property">VO</span>]</span><br></pre></td></tr></table></figure><p>可见，B上下文的作用域链包含了A上下文的变量对象，并且由于B访问A中的变量，阻止了A上下文的变量对象被垃圾回收机制回收。</p><p>看一个面试题经常会遇到的一个关于闭包的很经典的题目</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">    arr[i] = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">arr[<span class="number">0</span>]();<span class="comment">//3</span></span><br><span class="line">arr[<span class="number">1</span>]();<span class="comment">//3</span></span><br><span class="line">arr[<span class="number">2</span>]();<span class="comment">//3</span></span><br></pre></td></tr></table></figure><p>在 arr[0] 函数执行之前，我们可以知道，全局上下文的变量对象如下所示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">globalContext = &#123;</span><br><span class="line"><span class="attr">VO</span>:&#123;</span><br><span class="line"><span class="attr">arr</span>:[],</span><br><span class="line">        i=<span class="number">3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 arr[0] 被调用执行时，其作用域链在函数上下文的创建阶段被创建，其作用域链如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr[0]Context = &#123;</span><br><span class="line">    Scope: [arr[0]Context.VO, globalContext.VO]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>arr[0]函数会在自身变量对象中寻找i（arr总没有i），所以会向上找，找到全局上下文变量对象中的i，所以输出3</p><p>那么如何解决闭包</p><h3 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr =  [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">arr[i] =  (<span class="keyword">function</span>(<span class="params">j</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)(i)</span><br><span class="line">&#125;</span><br><span class="line">arr[<span class="number">0</span>]();<span class="comment">//0</span></span><br><span class="line">arr[<span class="number">1</span>]();<span class="comment">//1</span></span><br><span class="line">arr[<span class="number">2</span>]();<span class="comment">//2</span></span><br></pre></td></tr></table></figure><h3 id="ES6中的let"><a href="#ES6中的let" class="headerlink" title="ES6中的let"></a>ES6中的let</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">    arr[i] = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">arr[<span class="number">0</span>]();<span class="comment">//0</span></span><br><span class="line">arr[<span class="number">1</span>]();<span class="comment">//1</span></span><br><span class="line">arr[<span class="number">2</span>]();<span class="comment">//2</span></span><br></pre></td></tr></table></figure><h3 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout"></a>setTimeout</h3><p>也还可以利用setTimeout的第三个参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">    arr[i] = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params">i</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">    &#125;,<span class="number">0</span>,i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/js/APlayer.min.js&quot; class=&quot;aplayer-se</summary>
      
    
    
    
    <category term="前端" scheme="https://larmyliu.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="https://larmyliu.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript之防抖节流</title>
    <link href="https://larmyliu.github.io/JavaScript%E4%B9%8B%E9%98%B2%E6%8A%96%E8%8A%82%E6%B5%81/"/>
    <id>https://larmyliu.github.io/JavaScript%E4%B9%8B%E9%98%B2%E6%8A%96%E8%8A%82%E6%B5%81/</id>
    <published>2024-06-30T06:47:11.000Z</published>
    <updated>2024-06-30T06:55:19.567Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><p>﻿## JavaScript之防抖节流</p><p>我记得比软设的时候师兄问有没有使用<strong>防抖函数</strong>或<strong>节流函数</strong>，当时了解但是没用，过了将近一年，有些知识都忘了，痛定思痛，赶紧补上。</p><p><img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOC85LzQvMTY1YTI1MmI0YjY5YWFiNQ?x-oss-process=image/format,png" alt="15341407332107"></p><h3 id="防抖函数（debounce）"><a href="#防抖函数（debounce）" class="headerlink" title="防抖函数（debounce）"></a>防抖函数（debounce）</h3><p>在事件被触发n秒后再执行回调，如果在这n秒内又被触发，则重新计时。</p><p>这个描述就可以知道他的使用场景：输入框校验，手机号、邮箱验证输入检测，防误触</p><h4 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h4><p>一般情况下，我们肯定是和Ajax结合，用于和后端进行数据交互，如果频繁的发起Ajax请求，那么无疑会造成很多资源上的浪费</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>防抖节流<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    没有防抖的input：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;noDebounce&quot;</span>&gt;</span></span><br><span class="line">    防抖的input: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;Debounce&quot;</span>&gt;</span></span><br><span class="line">    节流的input：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;Throttle&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> noDebounce = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;noDebounce&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> <span class="title class_">Debounce</span> = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;Debounce&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> <span class="title class_">Throttle</span> = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;Throttle&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">ajax</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toLocaleString</span>());</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        noDebounce.<span class="property">onkeydown</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">ajax</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200717000833286.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpdWFybXlsaXU=,size_16,color_FFFFFF,t_70"></p><p>但是如果使用了防抖函数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>防抖节流<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    没有防抖的input：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;noDebounce&quot;</span>&gt;</span></span><br><span class="line">    防抖的input: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;Debounce&quot;</span>&gt;</span></span><br><span class="line">    节流的input：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;Throttle&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> noDebounce = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;noDebounce&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> <span class="title class_">Debounce</span> = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;Debounce&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> <span class="title class_">Throttle</span> = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;Throttle&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">ajax</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toLocaleString</span>());</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        noDebounce.<span class="property">onkeydown</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">ajax</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//防抖函数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn,delay</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">args</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="built_in">clearTimeout</span>(fn.<span class="property">id</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(args)</span></span><br><span class="line"><span class="language-javascript">                fn.<span class="property">id</span> = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//因为是函数，所以this指向window</span></span></span><br><span class="line"><span class="language-javascript">                    fn.<span class="title function_">call</span>(<span class="variable language_">this</span>,args);</span></span><br><span class="line"><span class="language-javascript">                &#125;,delay)</span></span><br><span class="line"><span class="language-javascript">                </span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Debounce</span>.<span class="property">onkeydown</span> = <span class="title function_">debounce</span>(ajax,<span class="number">1000</span>)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200717000856339.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpdWFybXlsaXU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>很明显，请求的次数就比没有添加防抖的输入框少，这样就可以节省不少资源。</p><h3 id="节流函数（Throttle）"><a href="#节流函数（Throttle）" class="headerlink" title="节流函数（Throttle）"></a>节流函数（Throttle）</h3><p>在规定的时间内，只触发一次函数。如果在规定时间内触发多次函数，也只执行一次。在搜索框联想，放在重复提交表单等</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//节流</span></span><br><span class="line">        <span class="keyword">var</span> throttle = <span class="keyword">function</span>(<span class="params">func, delay</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">var</span> startTime = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                    <span class="keyword">var</span> curTime = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">                    <span class="keyword">var</span> remaining = delay - (curTime - startTime);</span><br><span class="line">                    <span class="keyword">var</span> context = <span class="variable language_">this</span>;</span><br><span class="line">                    <span class="keyword">var</span> args = <span class="variable language_">arguments</span>;</span><br><span class="line">                    <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">                    <span class="keyword">if</span> (remaining &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                        func.<span class="title function_">apply</span>(context, args);</span><br><span class="line">                        startTime = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        timer = <span class="built_in">setTimeout</span>(func, remaining);</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title class_">Throttle</span>.<span class="property">onclick</span> = <span class="title function_">throttle</span>(ajax,<span class="number">3000</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/js/APlayer.min.js&quot; class=&quot;aplayer-se</summary>
      
    
    
    
    <category term="前端" scheme="https://larmyliu.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="https://larmyliu.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript内存管理解释</title>
    <link href="https://larmyliu.github.io/JavaScript%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E8%A7%A3%E9%87%8A/"/>
    <id>https://larmyliu.github.io/JavaScript%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E8%A7%A3%E9%87%8A/</id>
    <published>2024-06-30T06:47:11.000Z</published>
    <updated>2024-06-30T06:55:19.571Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/css/APlayer.min.css"><script src="/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/js/Meting.min.js"></script><h2 id="JavaScript内存管理解释"><a href="#JavaScript内存管理解释" class="headerlink" title="JavaScript内存管理解释"></a>JavaScript内存管理解释</h2><p>很多时候，对于JavaScript开发者可能对内存管理毫无了解，毕竟JavaScript引擎帮你解决了这个问题</p><p>从一方面来说，你会遇到类似于内存泄露的问题，只有你知道内存是怎么样工作的，你才能解决这个问题</p><p>在这篇文章，我会向你介绍如何分配内存和垃圾处理，同时，如何去避免普通的内存泄露</p><h3 id="内存生命周期"><a href="#内存生命周期" class="headerlink" title="内存生命周期"></a>内存生命周期</h3><p>在JavaScript中，当我们创建一个变量，函数，或者任何一个你可以想到的数据类型，JS引擎会为这些分配内存，当你再也不使用这些数据类型时，JS引擎会释放掉这些内存</p><p><strong>内存分配</strong>是在内存中保留空间的过程，在释放内存的同时释放空间，以便用于其他目的。</p><p>每次我们分配一个变量或者创建一个函数，内存总是经过以下几个相同的状态</p><p><img src= "/img/loading.gif" data-src="http://felixgerschau.com/static/87cb911a5bdda814cdc38a1679e327e5/c1b63/memory-life-cycle.png" alt="Memory life cycle overview"></p><ul><li><p><strong>分配</strong>内存</p><p>JavaScript非常照顾我们：他为我们创建的对象进行内存分配</p></li><li><p><strong>使用</strong>内存</p><p>使用内存是我们在代码中明确做的事情：<strong>读</strong>和<strong>写</strong>对于内存而已不过是对变量的读写</p></li><li><p><strong>释放</strong>内存</p><p>这一步同样是JavaScript引擎帮我们处理好了的。一旦分配的内存被释放了，释放出来的内存可以被用作新的目的</p></li></ul><blockquote><p>在内存管理上下文中，对象不仅包括JS对象，还包括函数和函数作用域。</p></blockquote><h3 id="内存堆和堆栈"><a href="#内存堆和堆栈" class="headerlink" title="内存堆和堆栈"></a>内存堆和堆栈</h3><p>我们都知道在JavaScript中对于任何我们创建的数据类型，引擎都会为其分配内存，当不再使用时释放掉</p><p>我的脑海中下一个问题就是：这些东西被存储在什么地方</p><p>JavaScript引擎有两个地方可以存储数据：内存堆和堆栈</p><p>堆和栈是两种数据结构，被内存引擎用在不同的目的</p><h3 id="栈：静态内存器分配"><a href="#栈：静态内存器分配" class="headerlink" title="栈：静态内存器分配"></a>栈：静态内存器分配</h3><blockquote><p>在本系列关于调用堆栈和事件循环的第一部分中，您可能知道堆栈，在第一部分中，我重点介绍了如何使用它来跟踪JS解释器需要调用的函数。</p></blockquote><p><img src= "/img/loading.gif" data-src="https://felixgerschau.com/static/b94165593eb6e02d73039d8b2cfccfdd/c1b63/stack-memory-explained.png" alt="Memory stack Example"></p><p>堆栈是JavaScript用来存储静态数据的数据结构。静态数据是引擎在编译时知道其大小的数据。在JavaScript中，这包括基本值(字符串、数字、布尔值、undefined和null)和指向对象和函数的引用。</p><p>因为引擎知道大小不会改变，所以它会为每个值分配固定数量的内存。</p><p>在执行之前分配内存的过程称为静态内存分配。</p><p>因为引擎为这些值分配了固定数量的内存，所以对原始值的大小有限制。</p><p>这些值和整个堆栈的限制因浏览器而异。</p><h3 id="堆-动态内存分配"><a href="#堆-动态内存分配" class="headerlink" title="堆:动态内存分配"></a>堆:动态内存分配</h3><p>堆是另一个存储数据的空间，JavaScript在其中存储对象和函数。</p><p>与堆栈不同，引擎不会为这些对象分配固定数量的内存。相反，将根据需要分配更多的空间。</p><p>这种分配内存的方式也称为动态内存分配。</p><p>为了得到一个概述，下面是这两个存储的特性对比:</p><p>这些值和整个堆栈的限制因浏览器而异。</p><table><thead><tr><th>Stack</th><th>Heap</th></tr></thead><tbody><tr><td>原始值和引用对象和函数，在编译时知道大小在运行时知道大小，为每个对象分配固定数量的内存</td><td>在运行时知道对象和函数的大小，没有对每个对象进行限制</td></tr></tbody></table><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>让我们看一些代码的例子，在注释中我提到了分配的内容:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">24</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>JS为这个对象在堆中分配了内存，实际值仍然是原始值，这就是它们存储在堆栈中的原因。</p><h3 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h3><p>我们都知道JavaScript为所有对象分配了内存，如果我们还记得内存生命周期，最后一步就是释放内存</p><p>和内存分配相似，JS引擎也为我们处理好了这一步，更具体而言，垃圾收集器来处理这个问题</p><p>一旦js引擎认出，一个曾经出现过的变量或者函数不再被使用，会释放掉它的内存</p><p>这样做的主要问题是，是否还需要一些内存是一个无法决定的问题，这意味着不可能有一种算法能够在不再需要的时候收集所有的内存</p><p>一些算法提供了一个很好的逼近问题。我将讨论最常用的:引用计数垃圾收集和标记和清除算法。</p><h3 id="引用计数器垃圾收集"><a href="#引用计数器垃圾收集" class="headerlink" title="引用计数器垃圾收集"></a>引用计数器垃圾收集</h3><p>这是最简单的近似。它收集没有引用指向它们的对象</p><p>让我们看一个例子，线条表示引用</p><p><a href="https://felixgerschau.com/video/stack-heap-gc-animation.mp4">例子视频</a></p><p>注意，在最后一个帧中，只有兴趣爱好留在堆中，因为它是在最后有引用的对象</p><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p>这个算法存在一个问题是没有考虑到循环引用，这个出现在当一个或者多个对象互相引用，但是不能被代码访问到了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> son = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dad = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Johnson&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">son.<span class="property">dad</span> = dad;</span><br><span class="line">dad.<span class="property">son</span> = son;</span><br><span class="line"></span><br><span class="line">son = <span class="literal">null</span>;</span><br><span class="line">dad = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://felixgerschau.com/static/30c115f91d53d20972287fa05592520c/5a190/reference-cycle.png" alt="Reference cycle illustrated"></p><p>将它们设置为null不会使引用计数算法识别出它们不再被使用，因为它们都有传入的引用。</p><h3 id="标记和清扫算法标记"><a href="#标记和清扫算法标记" class="headerlink" title="标记和清扫算法标记"></a>标记和清扫算法标记</h3><p>扫描算法解决了循环依赖的问题。它不是简单地计数对给定对象的引用，而是检测它们是否可从根对象访问。</p><p>浏览器的根目录是<code>window</code>对象，而在NodeJS中这是<code>global</code>的</p><p><img src= "/img/loading.gif" data-src="https://felixgerschau.com/static/87b4e1eb66afc84d49da13af8e897367/5a190/garbage-collectoion-algorithm.png" alt="Mark-and-sweep algorithm illustrated"></p><p>该算法将不能到达的对象标记为垃圾，然后扫描(收集)它们。根对象永远不会被收集。</p><p>这样，循环依赖关系就不再是问题了。在前面的示例中，父对象和子对象都不能从根访问。因此，它们都将被标记为垃圾并被收集。</p><p>自2012年以来，该算法在所有现代浏览器中都得到了实现。改进的只是性能和实现，而不是算法的核心思想本身</p><h3 id="权衡"><a href="#权衡" class="headerlink" title="权衡"></a>权衡</h3><p>自动垃圾收集使我们能够专注于构建应用程序，而不是在内存管理上浪费时间。然而，我们需要注意一些权衡。</p><h3 id="内存使用"><a href="#内存使用" class="headerlink" title="内存使用"></a>内存使用</h3><p>由于算法无法确切知道什么时候不再需要内存，Javascript应用程序可能会使用比实际需要更多的内存。</p><p>即使对象被标记为垃圾，也要由垃圾收集器决定何时以及是否要收集分配的内存。</p><p>如果您需要您的应用程序尽可能地提高内存效率，那么最好使用较低级别的语言。但请记住，这有它自己的一套权衡。</p><h3 id="表现"><a href="#表现" class="headerlink" title="表现"></a>表现</h3><p>为我们收集垃圾的算法通常定期运行以清理未使用的对象。</p><p>问题是，我们作为开发人员，不知道这到底什么时候会发生，收集大量垃圾或频繁收集垃圾可能会影响性能，因为这样做需要一定的计算能力然而。</p><p>然而，用户或开发人员通常不会注意到这种影响。</p><h3 id="内存泄露"><a href="#内存泄露" class="headerlink" title="内存泄露"></a>内存泄露</h3><p>有了前面关于内存管理的知识，让我们看看最常见的内存泄漏，如果理解背后发生的事情，这些是可以轻松避免的。</p><h4 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h4><p>在全局变量中存储数据可能是最常见的内存泄漏类型在浏览器的<code>JavaScript</code>中，</p><p>如果不使用<code>var</code>、<code>const</code>或<code>let</code>，则该变量将附加到<code>window</code>对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">users = <span class="title function_">getUsers</span>();</span><br></pre></td></tr></table></figure><p>在严格模式下运行代码可以避免这种情况。</p><p>除了意外地将变量添加到根目录之外，在许多情况下，您可能有意这样做。</p><p>您当然可以使用全局变量，但要确保在不再需要数据时释放空间。</p><p>要释放内存，将全局变量赋值为null</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">users</span> = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><h4 id="忘记定时器和回调函数"><a href="#忘记定时器和回调函数" class="headerlink" title="忘记定时器和回调函数"></a>忘记定时器和回调函数</h4><p>忘记计时器和回调会使应用程序的内存使用量上升。特别是在单页应用程序(spa)中，在动态添加事件监听器和回调时必须小心。</p><h4 id="忘记定时器"><a href="#忘记定时器" class="headerlink" title="忘记定时器"></a>忘记定时器</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> object = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> intervalId = <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// everything used in here can&#x27;t be collected</span></span><br><span class="line">  <span class="comment">// until the interval is cleared</span></span><br><span class="line">  <span class="title function_">doSomething</span>(object);</span><br><span class="line">&#125;, <span class="number">2000</span>);</span><br></pre></td></tr></table></figure><p>上面的代码每2秒运行一次函数。</p><p>如果您的项目中有这样的代码，那么您可能不需要一直运行它。</p><p>只要这个间隔没有被取消，在这个间隔中引用的对象就不会被垃圾回收确保在不再需要间隔时清除它。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">clearInterval</span>(intervalId);</span><br></pre></td></tr></table></figure><p>这在单页面应用中尤为重要。即使当导航离开需要此间隔的页面时，它仍将在后台运行。</p><h4 id="忘记回调"><a href="#忘记回调" class="headerlink" title="忘记回调"></a>忘记回调</h4><p>假设您向按钮添加了一个<code>onclick</code>监听器，该监听器稍后将被删除。旧的浏览器无法收集监听器，但现在，这已经不是问题了。不过，当你不再需要事件监听器时，删除它们仍然是一个好主意。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onClick</span> = (<span class="params"></span>) =&gt; <span class="title function_">alert</span>(<span class="string">&#x27;hi&#x27;</span>);</span><br><span class="line"></span><br><span class="line">element.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, onClick);</span><br><span class="line"></span><br><span class="line">element.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;click&#x27;</span>, onClick);</span><br><span class="line">element.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(element);</span><br></pre></td></tr></table></figure><h4 id="脱离DOM引用"><a href="#脱离DOM引用" class="headerlink" title="脱离DOM引用"></a>脱离DOM引用</h4><p>此内存泄漏与前面的内存泄漏类似:它发生在用JavaScript存储DOM元素时。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> elements = [];</span><br><span class="line"><span class="keyword">const</span> element = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">elements.<span class="title function_">push</span>(element);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">removeAllElements</span>(<span class="params"></span>) &#123;</span><br><span class="line">  elements.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(item.<span class="property">id</span>))</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当您删除这些元素时，可能需要确保也从数组中删除该元素。</p><p>否则，就无法收集这些DOM元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> elements = [];</span><br><span class="line"><span class="keyword">const</span> element = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">elements.<span class="title function_">push</span>(element);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">removeAllElements</span>(<span class="params"></span>) &#123;</span><br><span class="line">  elements.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(item.<span class="property">id</span>));</span><br><span class="line">    elements.<span class="title function_">splice</span>(index, <span class="number">1</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于每个DOM元素也保留对其父节点的引用，因此可以防止垃圾收集器收集元素的父元素和子元素。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在本文中，我总结了JavaScript中内存管理的核心概念。</p><p>写这篇文章帮助我澄清了一些我还没有完全理解的概念，我希望这篇文章能够很好地概述<code>Javascript</code>中的内存管理是如何工作的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/js/APlayer.min.js&quot; class=&quot;aplayer-se</summary>
      
    
    
    
    <category term="前端" scheme="https://larmyliu.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="https://larmyliu.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
</feed>
